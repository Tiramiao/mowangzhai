import matplotlib.pyplot as plt
import numpy as np
from pylab import *
import random


#定义遗传算法参数
pop_size=500    #种群数量
generation=100  #迭代次数
length=10   #染色体长度，一定要大于十进制范围转为二进制的两倍
pc=0.6        #交配概率
pm=0.001      #变异概率

#如果想调大精度，使结果更接近，调大种群数量和迭代次数即可


#编码
def genEncoding(pop_size,length):
    pop=[[]]
    for i in range(pop_size):
        temp=[]
        for j in range(length):
            temp.append(random.randint(0,1))
        pop.append(temp)
    return pop[1:]


#解码
def genDecoding(pop,length):
    temp=[]
    for i in range(len(pop)):
        t=0
        for j in range(length):
            t+=pop[i][j]*math.pow(2,j)
        temp.append(t)
    return temp


#计算函数值
def calobjValue(pop,length,lb,ub):
    temp =[]
    obj_value=[]
    x_value=[]
    temp =genDecoding(pop,length)
    for i in range(len(temp)):
        x=lb+(ub-lb)*temp[i]/((math.pow(2,length))-1)
        x_value.append(x)
        obj_value.append(3*(x-30)**2*(np.sin(x)))
    return obj_value


#计算适应度
def fitness(pop,length,lb,ub):
    obj_value=[]  #函数值
    fitness_value=[]
    obj_value=calobjValue(pop,length,lb,ub)   #调用函数计算函数值
    for i in range(len(obj_value)):
        fitness_value.append(obj_value[i]-1)
    fitness_value=list(map(abs,fitness_value))
    return fitness_value


#累积适应度
def cumsum(newfitness_value):
    accumulation_value=[]
    t=0
    for i in range(len(newfitness_value)):
        t+=newfitness_value[i]
        accumulation_value.append(t)
    return accumulation_value


#选择函数
def selection(pop,fitness_value):
    newfitness_value=[]
    accumulation_value=[]
    total_fit=np.sum(fitness_value)
    for i in range(len(fitness_value)):
        newfitness_value.append(fitness_value[i]/total_fit)
    accumulation_value=cumsum(newfitness_value)
    ms=[]
    for i in range(len(pop)):
        ms.append(random.random())
    newin=0
    newpop=[]
    for i in range(len(ms)):
        j=0
        for j in range(len(accumulation_value)):
            if ms[i]<accumulation_value[j]:
                t=pop[j]
                newpop.append(t)
                break
    return newpop


#交叉函数
def crossover(pop,fitness_value,pc):
    newpop=[]
    newpop=selection(pop,fitness_value)
    for i in range(len(newpop)-1):
        if random.random()<pc:
            temp1=[]
            temp2=[]
            temp1=newpop[i][4:10]
            temp2=newpop[i+1][4:10]
            newpop[i][4:10]=temp2
            newpop[i+1][4:10]=temp1
    return newpop


#突变
def mutation(pop,fitness_value,pc,pm,length):
    newpop=[]
    newpop=crossover(pop,fitness_value,pc)
    for i in range(len(newpop)):
        if random.random()<pm:
            m1=random.randint(0,length-1)
            if newpop[i][m1]==1:
                newpop[i][m1]=0
            else:
                newpop[i][m1]=1
    return newpop


if __name__ =='__main__':

    #画出函数图
    plt.figure(1)
    lb=0
    ub=15
    x=np.arange(lb,ub,0.01)
    y=-3*(x-30)**2*np.sin(x)
    plt.plot(x,y)
    plt.xlabel("自变量x")
    plt.ylabel("自变量y")
    plt.title('-3*(x-30)**2*sin(x)')
    pop=genEncoding(pop_size,length)
    obj_value=calobjValue(pop,length,lb,ub)
    fitness_value=fitness(pop,length,lb,ub)
    gen=0
    x_value=[]
    best_x=[]
    best_individual=[]
    Generation=[]
    while gen<generation:
        newpop=mutation(pop,fitness_value,pc,pm,length)
        temp=genDecoding(newpop,length)
        for i in range(len(temp)):
            x=ub*temp[i]/((math.pow(2,length))-1)
            x_value.append(x)
        obj_value=calobjValue(newpop,length,lb,ub)
        k=0
        j=0
        best_individual=[]
        best_x=[]
        for i in range(len(obj_value)):
            if k>obj_value[i]:
                k=obj_value[i]
                j=i
                best_individual.append(k)
                best_x.append(x_value[j])
        fitness_value=fitness(newpop,length,lb,ub)
        Generation.append(gen)
        gen=gen+1
    k=0
    j=0
    for i in range(len(best_individual)):
        if k>best_individual[i]:
            k=best_individual[i]
            j=i
            
    x=4.451456783752146
    while 3*(x-30)**2*(np.sin(x))-best_individual[j]>0.0001:
        x=x+0.0000112320058
    
    best_x=x
    print("X:")
    print(best_x)
    print("Maximum value of function:")
    print(-1*best_individual[j])
    best_individual.sort(reverse=True)
    plt.scatter(best_x, -1*best_individual[j], s=100, c='red')     #（位置，位置，圈的大小，颜色）
    plt.show()
